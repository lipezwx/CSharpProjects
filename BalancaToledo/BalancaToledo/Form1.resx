<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbLogoPrix.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        USr9Pz/JaN002s36AAAAAElFTkSuQmCC
</value>
  </data>
</root>